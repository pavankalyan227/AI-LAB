 class search:
    def __init__(self, start, goal, graph):
        self.graph = graph
        self.start = start
        self.goal = goal

    def sortarg(self, f):
        for i in range(len(f)):
            for j in range(len(f)):
                if self.graph[f[i]]['x'] < self.graph[f[j]]['x'] and f[i] != 'x' and f[j] != 'x':
                    f[i], f[j] = f[j], f[i]
        return f

    def greedybfs(self):
        f = []
        e = []
        f.append(self.start)
        while f:
            f = self.sortarg(f)
            node = f.pop(0)
            print(node, self.graph[node]['x'])
            if node == self.goal:
                print("goal found")
                return 1
            e.append(node)
            f.clear()
            for i in self.graph[node]:
                if i != 'x':
                    f.append(i)
        return 0

    def astar(self):
        f = []
        e = {}
        f.append([self.start, self.graph[self.start]['x']])
        while f:
            node = f.pop(0)
            print(node)
            if node[0] not in e:
                e[node[0]] = node[1]
                if node[0] == self.goal:
                    print("goal found\n")
                    return 1
            for neigh in self.graph[node[0]]:
                if neigh != 'x':
                    if neigh not in e or e[neigh] > node[1] + self.graph[neigh]['x'] - self.graph[node[0]]['x']:
                        f.append([neigh, node[1] + self.graph[neigh]['x'] - self.graph[node[0]]['x'] + self.graph[node[0]][neigh]])
        return 0

graph = {
    's': {'a': 2, 'b': 3, 'x': 10},#x is huristic value
    'a': {'e': 5, 'g': 2, 'x': 8},
    'b': {'g': 3, 'h': 1, 'x': 9},
    'e': {'x': 4},
    'g': {'x': 0},
    'h': {'x': 3}
}
print("greedy best search")
if(search('s', 'g', graph).greedybfs()==0):
    print("solution not found for greedy best search")
print("Astar algorithm")
if(search('s', 'g', graph).astar()==0):
    print("solution not found for Astar algorithm")
#output




 class search:
    def __init__(self, start, goal, graph):
        self.graph = graph
        self.start = start
        self.goal = goal
​
    def sortarg(self, f):
        for i in range(len(f)):
            for j in range(len(f)):
                if self.graph[f[i]]['x'] < self.graph[f[j]]['x'] and f[i] != 'x' and f[j] != 'x':
                    f[i], f[j] = f[j], f[i]
        return f
​
    def greedybfs(self):
        f = []
        e = []
        f.append(self.start)
        while f:
            f = self.sortarg(f)
            node = f.pop(0)
            print(node, self.graph[node]['x'])
            if node == self.goal:
                print("goal found")
                return 1
            e.append(node)
            f.clear()
            for i in self.graph[node]:
                if i != 'x':
                    f.append(i)
        return 0
​
    def astar(self):
        f = []
        e = {}
        f.append([self.start, self.graph[self.start]['x']])
        while f:
            node = f.pop(0)
            print(node)
            if node[0] not in e:
                e[node[0]] = node[1]
                if node[0] == self.goal:
                    print("goal found\n")
                    return 1
            for neigh in self.graph[node[0]]:
                if neigh != 'x':
                    if neigh not in e or e[neigh] > node[1] + self.graph[neigh]['x'] - self.graph[node[0]]['x']:
                        f.append([neigh, node[1] + self.graph[neigh]['x'] - self.graph[node[0]]['x'] + self.graph[node[0]][neigh]])
        return 0
​
graph = {
    's': {'a': 2, 'b': 3, 'x': 10},#x is huristic value
    'a': {'e': 5, 'g': 2, 'x': 8},
    'b': {'g': 3, 'h': 1, 'x': 9},
    'e': {'x': 4},
    'g': {'x': 0},
    'h': {'x': 3}
}
print("greedy best search")
if(search('s', 'g', graph).greedybfs()==0):
    print("solution not found for greedy best search")
print("Astar algorithm")
if(search('s', 'g', graph).astar()==0):
    print("solution not found for Astar algorithm")



greedy best search
s 10
a 8
g 0
goal found
Astar algorithm
['s', 10]
['a', 10]
['b', 12]
['e', 11]
['g', 4]
goal found
