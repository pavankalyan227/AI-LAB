class puzz:
    def __init__(self,start,goal):
        self.start=start
        self.goal=goal
    def huristic(self,node):
        c=0
        for i in range(len(node)):
            if(node[i]!=goal[i] and node[i]!=0):
                c=c+1
        return c
    def sortarg(self,f):
        for i in range(len(f)):
            for j in range(len(f)):
                if(f[i][1]<f[j][1]):
                    f[i],f[j]=f[j],f[i]
        return f
    def up(self,node,i):
        if(i<3):
            return node
        else:
            node[i],node[i-3]=node[i-3],node[i]
            return node
    def down(self,node,i):
        if(i>5):
            return node
        else:
            node[i],node[i+3]=node[i+3],node[i]
            return node
    def left(self,node,i):
        if(i%3==0):
            return node
        else:
            node[i],node[i-1]=node[i-1],node[i]
            return node
    def right(self,node,i):
        if((i+1)%3==0):
            return node
        else:
            node[i],node[i+1]=node[i+1],node[i]
            return node
    def solution(self):
        f=[]
        e=[]
        f.append([self.start,self.huristic(self.start)])
        while(f):
            print("Frontier:",f)
            print("Explored:",e)
            f=self.sortarg(f)
            node=f.pop(0)
            e.append(node[0])
            print(node)
            if node[0]==self.goal:
                print("goal found")
                break
            i=node[0].index(0)
            action=[self.up(node[0].copy(),i),self.down(node[0].copy(),i),self.left(node[0].copy(),i),self.right(node[0].copy(),i)]
            for t in action:
                if(t not in e):
                    f.append([t,self.huristic(t)])
intial=[1,2,3,0,4,6,7,5,8]
goal=[1,2,3,4,5,6,7,8,0]
puzz(intial,goal).solution()
# output
Frontier: [[[1, 2, 3, 0, 4, 6, 7, 5, 8], 3]]
Explored: []
[[1, 2, 3, 0, 4, 6, 7, 5, 8], 3]
Frontier: [[[0, 2, 3, 1, 4, 6, 7, 5, 8], 4], [[1, 2, 3, 7, 4, 6, 0, 5, 8], 4], [[1, 2, 3, 4, 0, 6, 7, 5, 8], 2]]
Explored: [[1, 2, 3, 0, 4, 6, 7, 5, 8]]
[[1, 2, 3, 4, 0, 6, 7, 5, 8], 2]
Frontier: [[[1, 2, 3, 7, 4, 6, 0, 5, 8], 4], [[0, 2, 3, 1, 4, 6, 7, 5, 8], 4], [[1, 0, 3, 4, 2, 6, 7, 5, 8], 3], [[1, 2, 3, 4, 5, 6, 7, 0, 8], 1], [[1, 2, 3, 4, 6, 0, 7, 5, 8], 3]]
Explored: [[1, 2, 3, 0, 4, 6, 7, 5, 8], [1, 2, 3, 4, 0, 6, 7, 5, 8]]
[[1, 2, 3, 4, 5, 6, 7, 0, 8], 1]
Frontier: [[[1, 0, 3, 4, 2, 6, 7, 5, 8], 3], [[1, 2, 3, 4, 6, 0, 7, 5, 8], 3], [[0, 2, 3, 1, 4, 6, 7, 5, 8], 4], [[1, 2, 3, 7, 4, 6, 0, 5, 8], 4], [[1, 2, 3, 4, 5, 6, 0, 7, 8], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 0], 0]]
Explored: [[1, 2, 3, 0, 4, 6, 7, 5, 8], [1, 2, 3, 4, 0, 6, 7, 5, 8], [1, 2, 3, 4, 5, 6, 7, 0, 8]]
[[1, 2, 3, 4, 5, 6, 7, 8, 0], 0]
goal found
In [ ]:


â€‹
