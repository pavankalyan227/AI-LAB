#missionaries&cannibals 
from collections import deque

class State:
    def __init__(self, m, c, boat):
        self.m = m
        self.c = c
        self.boat = boat

    def valid(self):
        if self.m < 0 or self.c < 0:
            return False
        if self.m > 3 or self.c > 3:
            return False
        if (self.m > 0 and self.c > self.m) or (self.m < 3 and (3 - self.m) < (3 - self.c)):
            return False
        return True

def MC(a, b):
    frontier = deque() #to reduce time complexity
    explored = set()
    frontier.append((a, b, []))
    while frontier:
        node = frontier.popleft()
        x = node[0]
        y = node[1]
        path = node[2]
        if x.m == 0 and x.c == 0 and x.boat == 0:
            return len(path), path + [(x, y)]
        if (x, y) not in explored and x.valid() and y.valid():
            explored.add((x, y))
            cp = path + [(x, y)]
            for i in range(3):
                for j in range(3):
                    if 0 < i + j <= 2:
                        if x.boat == 1:
                            new_x = State(x.m - i, x.c - j, 0)
                            new_y = State(y.m + i, y.c + j, 1)
                            if (new_x, new_y) not in explored:
                                frontier.append((new_x, new_y, cp))
                        else:
                            new_x = State(x.m + i, x.c + j, 1)
                            new_y = State(y.m - i, y.c - j, 0)
                            if (new_x, new_y) not in explored:
                                frontier.append((new_x, new_y, cp))

    return None

steps, path = MC(State(3, 3, 1), State(0, 0, 0))
if steps:
    print("Steps: {}".format(steps))
    for i in path:
        print("({}, {}, {}) ({}, {}, {})".format(i[0].m, i[0].c, i[0].boat, i[1].m, i[1].c, i[1].boat))
else:
    print("No solution found.")
    #output
    

Steps: 11
(3, 3, 1) (0, 0, 0)
(3, 1, 0) (0, 2, 1)
(3, 2, 1) (0, 1, 0)
(3, 0, 0) (0, 3, 1)
(3, 1, 1) (0, 2, 0)
(1, 1, 0) (2, 2, 1)
(2, 2, 1) (1, 1, 0)
(0, 2, 0) (3, 1, 1)
(0, 3, 1) (3, 0, 0)
(0, 1, 0) (3, 2, 1)
(0, 2, 1) (3, 1, 0)
(0, 0, 0) (3, 3, 1)
